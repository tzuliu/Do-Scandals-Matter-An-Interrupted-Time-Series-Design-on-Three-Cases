new;
//chdir c:\users\asmith\dropbox\teaching\are240c\;
chdir e:\dropbox\teaching\are240c\;

app="macro";

/*********************************/
/*         Load Data             */
/*********************************/
if app=="macro";
	/****** MACRO:   Date    Price   GDP   Potential  FFR   TB3  TB10*/
	start=19670100;   finish=20100000;
	loadm macro[]=yieldgdp.csv;
	macro=reshape(macro,rows(macro)/7,7);
	labels=macro[1,.];

	macro=selif(macro,(macro[.,1].>start).*(macro[.,1].<finish));

	grow=400*(ln(macro[.,3]./lagn(macro[.,3],1)));
	spread=macro[1:rows(macro),7]-macro[1:rows(macro),6];

	y=grow;
	zx=ones(rows(y),1)~lag1(grow)~lagn(spread,2);  

	zz=packr(y~zx);
	y=zz[.,1];
	zx=zz[.,2:cols(zz)];
    z =zx;				/* z's are the variables with breaking coefficients  */
	x =0;				/* x's are the variables with constant coefficients; set x=0 if none  */
    z =zx[.,1|3];				/* z's are the variables with breaking coefficients  */
	x =zx[.,2];				/* x's are the variables with constant coefficients; set x=0 if none  */

T=rows(y);

elseif app=="ge";
	/****** CORN:  Monthly data on corn and sorghum prices in Louisiana Gulf */
	loadm cornsorg[]=cornsorg.csv;
	cornsorg = reshape(cornsorg,rows(cornsorg)/3,3);
    labels=cornsorg[1,.]';
    
	corn = cornsorg[.,2];
	sorg = cornsorg[.,3];
	T = rows(corn);

	y = ln(corn./sorg); 
	T = rows(y);

	x=lag1(y);
	z=ones(T,1);
	z=z[2:T,.];
	y=y[2:T,.]; 
	x=x[2:T,.]; 

	T=rows(y);
	zx=z~x;
	//zx=z;
endif;


	"***********************************************";
	"      Regress y on z and x   ";
	"***********************************************";
	if maxc(stdc(zx))>0; call ols(0,y,zx); endif;


seq=seqa(1,1,T);


/*********************************************/
/*           Nyblom and AP Tests             */
/*********************************************/



/* Regression under null */
e=y-zx*inv(zx'zx)*zx'y;
  ze=z.*e;
Sigz=ze'ze/T;
U=(z.*e)*inv(chol(Sigz));
m=cumsumc(U)/sqrt(T);

/*  Nyblom test */
Ny=sumc(diag(m'm))/T;
cvNy=.461|.748|1|1.237|0|0;    /*  critical values from  Nyblom, JASA (1989)   */

/*  Andrews-Ploberger tests */
pi_=0.05;                      /* trimming parameter  */
s_=seqa(floor(pi_*T),1,floor((1-2*pi_)*T));
m_=m[s_[1]:s_[rows(s_)],.];
  s_=s_/T;
  F_=sumc(m_'.*m_')./(s_.*(1-s_));
AP_exp=ln(sumc(exp(0.5*F_))/((1-2*pi_)*T));                            cvAP_exp=2.08|3.27|4.3|5.3|6.22|7.09|7.85|8.79|9.55|10.34|0|0;   /* FOR PI=0.05; critical values from Andrews and Ploberger, Econometrica (1994, Table I) */                                                              
AP_ave=sumc(F_)/((1-2*pi_)*T);                                         cvAP_ave=2.66|4.29|5.70|7.22|8.53|9.66|10.97|12.32|13.53|14.65|0|0;   /* FOR PI=0.05; critical values from Andrews and Ploberger, Econometrica (1994, Table II) */                                                        
A_sup=maxc(F_);                                                        cvA_sup=9.71|12.80|15.36|17.54|19.57|21.53|23.41|25.20|26.95|28.64|0|0;   /* FOR PI=0.05; critical values from Andrews, Econometrica (1993, corrigendum, Table I) */                                                                   


/* dLL test (Elliott/Muller)  */
W=U;
rt=ones(T,1)*(1-10/T);
ii=2;
do while ii le T;
  W[ii,.]=(1-10/T)*W[ii-1,.]+U[ii,.]-U[ii-1,.];
  rt[ii]=rt[ii-1]*(1-10/T);
ii=ii+1;
endo;
eW=W-rt*inv(rt'rt)*rt'W;
dLL=(1-10/T)*sumc(sumc(eW^2))-sumc(sumc(U^2));
cvdLL=-8.36|-14.32|-19.84|-25.28|0|0;     /*  critical values from  Elliott and Muller, RE Stud (2006)   */




/*  Code to Plot  */
struct plotControl myPlot;    /* Declare plotControl structure */
myPlot = plotGetDefaults("xy");  /* Initialize plotControl structure */
	plotSetGrid(&myPlot, "off");
	plotSetLegend(&myPlot,"off");
	plotSetTitle(&myPlot,"y");
	plotLayout(3,1,1);
		PlotXY(myPlot,seq,y); 
	plotSetTitle(&myPlot,"m = cumulative sum of z*e");
	plotLayout(3,1,2);
		PlotXY(myPlot,seq,m[.,cols(m)]); 
	plotSetTitle(&myPlot,"F = m^2/s(1-s)");
	plotLayout(3,1,3);
		PlotXY(myPlot,seq[s_[1]*T:s_[rows(s_)]*T],F_); 
plotClearLayout();

struct plotControl myPlot;    /* Declare plotControl structure */
myPlot = plotGetDefaults("xy");  /* Initialize plotControl structure */
	plotSetGrid(&myPlot, "off");
	plotSetLegend(&myPlot,"off");
	plotSetTitle(&myPlot,"m = cumulative sum of z*e");
	plotLayout(2,1,1);
		PlotXY(myPlot,seq,m[.,cols(m)]); 
	plotSetTitle(&myPlot,"F = m^2/s(1-s)");
	plotLayout(2,1,2);
		PlotXY(myPlot,seq[s_[1]*T:s_[rows(s_)]*T],F_); 
plotClearLayout();



if cols(z)>1;
struct plotControl myPlot;    /* Declare plotControl structure */
myPlot = plotGetDefaults("xy");  /* Initialize plotControl structure */
	plotSetGrid(&myPlot, "off");
	plotSetLegend(&myPlot,"off");
	plotSetTitle(&myPlot,"m = cumulative sum of z*e");
	plotLayout(3,1,1);
		PlotXY(myPlot,seq,m[.,1]); 
	plotLayout(3,1,2);
		PlotXY(myPlot,seq,m[.,2]); 
	plotLayout(3,1,3);
		PlotXY(myPlot,seq,m[.,cols(m)]); 
plotClearLayout();
endif;



output file=output.out reset;
format /rzs 16,4;
"**********************************************************************************************";
"**********************************************************************************************";
"**********************************************************************************************";
"";
"***********************************************";
"      Nyblom and Andrews-Ploberger tests   ";
"***********************************************";
"                 Statistic      5% Critical Value";
" EM's dLL:"  dLL~cvdLL[cols(z)];
" Nyblom:  "  Ny~cvNy[cols(z)];
" AP_exp:  "  AP_exp~cvAP_exp[cols(z)];
" AP_ave:  "  AP_ave~cvAP_ave[cols(z)];
" sup LM:  "  A_sup~cvA_sup[cols(z)];
"";


end;



"**********************************************************************************************";
"**********************************************************************************************";
"**********************************************************************************************";
"";
"***********************************************";
"      Bai and Perron tests   ";
"***********************************************";

/*********************************************/
/*              Bai-Perron Tests             */
/*********************************************/

@version 2.4, November 19, 1999. These routines can be used by and distributed for non-profit academic purposes without any royalty except that the users must cite: Bai, Jushan and Pierre Perron (1996): "Estimating and Testing Linear Models with Multiple Structural Changes," Econometrica, 1998, vol 66, 47-78 and Bai, J. and P. Perron (1998): "Computation and Analysis of Multiple Structural Change Models," manuscript, Boston University. for any other commercial use and/or comments,  please contact Pierre Perron at perron at bu.edu. Even though we tried to make this program error-free we cannot be held responsible for any consequences that could result from remaining errors. Copyright, Pierre Perron (1999). @
format /ld 6,4;

bigt=rows(y);                        @set effective sample size@
//x=0;
q=cols(z);
if x eq 0;
  p = 0;
else;                         @number of regressors z@
  p=cols(x);
endif;                         @number of regressors x@
m=5;                         @maximum number of structural changes allowed@
eps1=.1;                  @Value of the trimming (in percentage) for the construction and critical values of the supF ype tests (used in the supF test, the Dmax, the supF(l+1|l) and the sequential  procedure). if these test are used, h below should be set at int(eps1*bigt). But if the tests are not required, estimation can be done with an arbitrary h.
                           There are five options: eps1 = .05, .10, .15, .20 or .25. for each option, the maximal value of m above is: 10 for eps1 = .05; 8 for eps1 = .10, 5 for eps1 = .15, 3 for eps1 = .20 and 2 for eps1 = .25.@

h=int(eps1*bigt);                  @minimal length of a segment (h >= q). Note: if robust=1, h should be set at a larger value.@

/* the following are options if p > 0.
----------------------------------- */
fixb=0;                     @set to 1 if use fixed initial values for beta@
betaini=0;                  @if fixb=1, load the initial value of beta.@
maxi=20;                    @maximum number of iterations for the nonlinear procedure to obtain global minimizers.@
printd=1;                   @set to 1 if want the output from the iterations to be printed.@
eps=0.0001;                 @criterion for the convergence.@
/*--------------------------------- */

robust=0;                   @set to 1 if want to allow for heterogeneity and autocorrelation the in residuals, 0 otherwise. The method used is Andrews(1991) automatic bandwidth with AR(1) approximation and the quadratic quernel. 
                              Note: Do not set to 1 if lagged dependent variables are included as regressors.@

prewhit=1;                   @set to 1 if want to apply AR(1) prewhitening prior to estimating the long run covariance matrix@
hetdat=1;                   @Option for the construction of the F-tests. Set to 1 if want to allow different moment matrices of the regressors accross segments. if hetdat = 0, the same moment matrices are assumed for each segment and estimated from the full sample. It is recommended to set hetdat=1.  if p > 0 set hetdat = 1.@
hetvar=1;                   @Option for the construction of the F-tests. Set to 1 if want to allow for the variance of the residuals to be different across segments. if hetvar=0, the variance of the residuals is assumed constant across segments and constructed from the full sample. This option is not available when robust = 1.@
hetomega=1-robust;                @Used in the construction of the confidence intervals for the break dates. if hetomega=0, the long run covariance matrix of zu is assumed identical accross segments (the variance of the errors u if robust = 0).@
hetq=1;                    @Used in the construction of the confidence intervals for the break dates. if hetq=0, the moment matrix of the data is assumed identical accross segments.@

doglobal=1;                 @set to 1 if want to call the procedure to obtain global minimizers.@
dotest=1;                   @set to 1 if want to construct the sup F, UDmax and WDmax tests. doglobal must be set to 1 to run this procedure.@
dospflp1=1;                 @set to 1 if want to construct the sup(l+1|l) tests where under the null the l breaks are obtained using global minimizers. doglobal must be set to 1 to run this procedure.@
doorder=0;                  @set to 1 if want to call the procedure that selects the number of breaks using information criteria. doglobal must be set to 1 to run this procedure.@
dosequa=1;                  @set to 1 if want to estimate the breaks sequentially and estimate the number of breaks using the supF(l+1|l) test.@
dorepart=0;                 @set to 1 if want to modify the break dates obtained from the sequential method using the repartition method of Bai (1995), Estimating breaks one at a time. This is needed for the confidence intervals obtained with estim below to be valid.@

estimbic=0;                  @set to 1 if want to estimate the model with the number of breaks selected by BIC.@
estimlwz=0;                  @set to 1 if want to estimate the model with the number of breaks selected by LWZ.@
estimseq=1;                 @set to 1 if want to estimate the model with the number of breaks selected using the sequential procedure.@
estimrep=0;                 @set to 1 if want to esimate the model with the breaks selected using the repartition method.@
estimfix=0;                  @set to 1 if want to estimate the model with a prespecified number of breaks equal to fixn set below@
fixn=0;

call pbreak(bigt,y,z,q,m,h,eps1,robust,prewhit,hetomega,hetq,doglobal,dotest,dospflp1,doorder,dosequa,dorepart,estimbic,estimlwz,estimseq,estimrep,estimfix,fixb,x,q,eps,maxi,fixb,betaini,printd,hetdat,hetvar,fixn);

//#include c:\users\asmith\dropbox\teaching\are240c\brcode.src;            @set the path to where you store the file brcode.txt@
#include e:\dropbox\teaching\are240c\brcode.src;            @set the path to where you store the file brcode.txt@




output off;

